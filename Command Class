// COPYRIGHT Dassault Systemes 2021
//===================================================================
//
// VALPartCmdAddinCommand.cpp
// The state chart based command: VALPartCmdAddinCommand
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  May 2021  Creation: Code generated by the CAA wizard  Dell
//===================================================================
#include "VALPartCmdAddinCommand.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"

#include "CATFrmEditor.h"
#include "CATDocument.h"
#include "CATInit.h"
#include "CATIPrtContainer.h"
#include "CATISpecObject.h"
#include "CATIPrtPart.h"
#include "CATIMechanicalRootFactory.h"
#include "CATISketchFactory.h"
#include "CATISketch.h"
#include "CATI2DWFFactory.h"
#include "CATI2DConstraintFactory.h"
#include <iostream.h>
#include "CATI2DCircle.h"
#include "CATI2DAxis.h"
#include "CATI2DPoint.h"
#include "CATI2DConstraint.h"
#include "CATIPrtFactory.h"
#include "CATIGSMFactory.h"
#include "CATIGSMPointCoord.h"
#include "CATICkeParm.h"
#include "CATICkeParmFactory.h"
#include "CATIGSMProceduralView.h"
#include "CATISketchPositioning.h"
#include "CATI2DLine.h"
#include "CATI2DCurve.h"
#include "CATIPartRequest.h"
#include "CATIBodyRequest.h"
#include "CATIGeometricalElement.h"
#include "CATBody.h"
#include "CATCell.h"
#include "CATIMfBRep.h"
#include "CATIFeaturize.h"
#include "CATIBRepAccess.h"
#include "CATMfBRepDecode.h"
#include "CATIGSMLinePtPt.h"





















CATCreateClass( VALPartCmdAddinCommand);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
VALPartCmdAddinCommand::VALPartCmdAddinCommand() :
  CATStateCommand ("VALPartCmdAddinCommand", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_Indication(NULL)
{
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
VALPartCmdAddinCommand::~VALPartCmdAddinCommand()
{
   if (_Indication != NULL) 
      _Indication->RequestDelayedDestruction();
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void VALPartCmdAddinCommand::BuildGraph()
{

	CATFrmEditor *pEditor = NULL;

	pEditor = CATFrmEditor::GetCurrentEditor();

	CATDocument *pDocument = NULL;

	pDocument = pEditor->GetDocument();

	CATInit_var spInit = pDocument;

	CATBaseUnknown *pRootContainer = spInit->GetRootContainer("CATIPrtContainer"); 

    CATIPrtContainer *pPrtContainer = (CATIPrtContainer*)pRootContainer;

	CATISpecObject_var spPartObj = pPrtContainer->GetPart();

	CATIPrtPart_var spPart = spPartObj;

	CATIMechanicalRootFactory_var spRootFactory = pPrtContainer;

    //CATISpecObject_var spGeomSet;

	//HRESULT rc = spRootFactory->CreateGeometricalSet("Construction_Sketches", spPartObj, spGeomSet, -1 );

	//CATISpecObject_var spBody = spRootFactory->CreatePRTTool("Body_Shaft", spPartObj);

	//spPart->SetCurrentFeature(spGeomSet);

	CATListValCATISpecObject_var spRefPlanes = spPart->GetReferencePlanes();

	CATISpecObject_var spSketchPlane = spRefPlanes[1];

	CATISketchFactory_var spSketchFactory = pPrtContainer;

	CATISpecObject_var spSketch = spSketchFactory->CreateSketch(spSketchPlane);

	CATISketch_var spSketchSkt = spSketch;

	CATI2DAxis_var  sp2DAxis;

	HRESULT rc = spSketchSkt->GetAbsolute2DAxis(sp2DAxis);

	CATISpecObject_var sp2DAxisOrigin = sp2DAxis->GetOriginPoint();

	CATI2DPoint_var sp2DAxisOriginPoint =  sp2DAxisOrigin;

	CATI2DWFFactory_var sp2DFactory = spSketchSkt;

	spSketchSkt->OpenEdition();

	CATI2DPoint_var spPt_bottom_left, spPt_bottom_right, spPt_top_right, spPt_top_left;

double pt_bottom_left[2]  = {10., 10.};
double pt_bottom_right[2] = {50., 10.};
double pt_top_right[2]    = {50., 50.};
double pt_top_left[2]     = {10., 50.};
spPt_bottom_left  = sp2DFactory->CreatePoint(pt_bottom_left);
spPt_bottom_right = sp2DFactory->CreatePoint(pt_bottom_right);
spPt_top_right    = sp2DFactory->CreatePoint(pt_top_right);
spPt_top_left     = sp2DFactory->CreatePoint(pt_top_left);

CATI2DLine_var spLine1, spLine2, spLine3, spLine4;
spLine1 = sp2DFactory->CreateLine(pt_bottom_left,pt_bottom_right);
spLine2 = sp2DFactory->CreateLine(pt_bottom_right,pt_top_right);
spLine3 = sp2DFactory->CreateLine(pt_top_right,pt_top_left);
spLine4 = sp2DFactory->CreateLine(pt_top_left,pt_bottom_left);

CATI2DCurve_var spCurve1 (spLine1);
CATI2DCurve_var spCurve2 (spLine2);
CATI2DCurve_var spCurve3 (spLine3);
CATI2DCurve_var spCurve4 (spLine4);
spCurve1->SetStartPoint(spPt_bottom_left); 
spCurve1->SetEndPoint(spPt_bottom_right);
spCurve2->SetStartPoint(spPt_bottom_right); 
spCurve2->SetEndPoint(spPt_top_right);
spCurve3->SetStartPoint(spPt_top_right); 
spCurve3->SetEndPoint(spPt_top_left);
spCurve4->SetStartPoint(spPt_top_left); 
spCurve4->SetEndPoint(spPt_bottom_left);


spSketchSkt->CloseEdition();

//spPart->SetCurrentFeature(spBody);

	CATIPrtFactory_var spPartFactory = pPrtContainer;

	CATISpecObject_var spPad = spPartFactory->CreatePad(spSketchSkt);



	spPad->Update();

	

	CATIPartRequest_var spPartRequest = spPart;


	CATBaseUnknown_var  spPartBody; 

	spPart->SetCurrentFeature(spPartBody);

	
	HRESULT HR = spPartRequest->GetMainBody(" ", spPartBody);
	if(FAILED(HR)||(!spPartBody))
	{
		return;
	}

	
	CATIBodyRequest_var spBodyRequest = spPartBody;

	CATListValCATBaseUnknown_var spListValCATBaseUnknown;

	HR = spBodyRequest->GetResults("",spListValCATBaseUnknown);
	if(FAILED(HR)|| 0>=spListValCATBaseUnknown.Size())
	{
		return;
	}

	/*if(!spListValCATBaseUnknown[1])
	{
		return;
	}*/


	CATIGeometricalElement_var spGeometricalElement = spListValCATBaseUnknown[1];

	if(!spGeometricalElement)
	{
		return;
	}

	CATBody_var spBody1 = spGeometricalElement->GetBodyResult();

	if(!spBody1)
	{
		return;
	}

	CATListPtrCATCell Allcellslist;
	spBody1->GetAllCells(Allcellslist,-1);

	if(Allcellslist.Size()<1)
	{
		return;
	}

	CATListPtrCATCell Vertexlist0;
	spBody1->GetAllCells(Vertexlist0,0);

	if(Vertexlist0.Size()<1)
	{
		return;
	}

	CATListPtrCATCell Edgelist1;
	spBody1->GetAllCells(Edgelist1,1);

	if(Edgelist1.Size()<1)
	{
		return;
	}

	CATListPtrCATCell Facelist2;
	spBody1->GetAllCells(Facelist2,2);

	if(Facelist2.Size()<1)
	{
		return;
	}

	CATListPtrCATCell Volumelist3;
	spBody1->GetAllCells(Volumelist3,3);

	if(Volumelist3.Size()<1)
	{
		return;
	}

	CATCell_var spCell = Facelist2[5];

	CATIBRepAccess_var spBRepAccessForFace = CATBRepDecode(spCell, spGeometricalElement);


	CATISpecObject_var spMfBRepObj = spBRepAccessForFace;

	CATIMfBRep_var spMfBRep = spBRepAccessForFace;

	CATIFeaturize_var spFeaturizeFace = spBRepAccessForFace; 

	CATISpecObject_var spFace = spFeaturizeFace->FeaturizeF();

	CATIGSMFactory_var spGSMFactory = pPrtContainer;

	/*double iCord1[3] = {25,25,0};

	double iCord2[3] = {25,25,20};

	CATISpecObject_var spPoint1 = CreatePoint(iCord1);

	CATISpecObject_var spPoint2 = CreatePoint(iCord2);

	CATISpecObject_var spLinenew = spGSMFactory->CreateLine(spPoint1, spPoint2);

	InsertInProceduralView(spLine);*/

	CATICkeParmFactory_var spCkeParmFactory = pPrtContainer;

	
CATICkeParm_var spPointLocation1 = spCkeParmFactory->CreateLength( "Point1", 20/1000.); 

			 CATICkeParm_var spPointLocation2 = spCkeParmFactory->CreateLength( "Point2", 20/1000.); 

			 CATICkeParm_var spPointLocation3 = spCkeParmFactory->CreateLength( "Point3", 0/1000.); 

			 CATIGSMPointCoord_var spPoint11 = spGSMFactory->CreatePoint( spPointLocation1, spPointLocation2, spPointLocation3 );
			 CATISpecObject_var spPoint1obj= spPoint11;
			
CATICkeParm_var spPointLocation4 = spCkeParmFactory->CreateLength( "Point4", 20/1000.); 

			 CATICkeParm_var spPointLocation5 = spCkeParmFactory->CreateLength( "Point5", 20/1000.); 

			 CATICkeParm_var spPointLocation6 = spCkeParmFactory->CreateLength( "Point6", 25/1000.); 

			 CATIGSMPointCoord_var spPoint22 = spGSMFactory->CreatePoint( spPointLocation4, spPointLocation5, spPointLocation6 );
			 CATISpecObject_var spPoint2obj= spPoint22;

			CATIGSMLinePtPt_var spGSMLinePtPt = spGSMFactory->CreateLine( spPoint1obj, spPoint2obj );
			 CATISpecObject_var spLineobj= spGSMLinePtPt;

			 InsertInProceduralView ( spLineobj );



           CATISpecObject_var spHoleObj = spPartFactory->CreateHole(spFace, spLineobj);

	



	}


	void VALPartCmdAddinCommand::InsertInProceduralView(CATISpecObject_var &ispSpecObject)
{
	CATTry
	{
		if(!ispSpecObject)
			return;
		CATIGSMProceduralView_var spGSMProcView = ispSpecObject;
		if(!!spGSMProcView)
		{
			spGSMProcView->InsertInProceduralView();
			ispSpecObject->Update();
		}
	}
	CATCatch(CATError, pError)
	{
	}
	CATEndTry;
}







































 



//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean VALPartCmdAddinCommand::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}
